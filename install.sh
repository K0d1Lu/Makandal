#!/bin/bash

# üî• Makandal - L'Assistant Rebelle des Tests E2E
# Script d'installation pour projet standalone

set -e

COLOR_GREEN='\033[0;32m'
COLOR_BLUE='\033[0;34m'
COLOR_YELLOW='\033[1;33m'
COLOR_RED='\033[0;31m'
COLOR_PURPLE='\033[0;35m'
COLOR_NC='\033[0m' # No Color

# Options
VERBOSE=false
FORCE_INSTALL=false
SKIP_TESTS=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -f|--force)
            FORCE_INSTALL=true
            shift
            ;;
        -s|--skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        -h|--help)
            echo "üî• Makandal Installation Script"
            echo ""
            echo "Usage: ./install.sh [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  -v, --verbose    Mode verbeux"
            echo "  -f, --force      Force la r√©installation"
            echo "  -s, --skip-tests Ignore les tests"
            echo "  -h, --help       Affiche cette aide"
            exit 0
            ;;
        *)
            echo "Option inconnue: $1"
            echo "Utilisez --help pour voir les options disponibles"
            exit 1
            ;;
    esac
done

log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${COLOR_PURPLE}üîç $1${COLOR_NC}"
    fi
}

echo -e "${COLOR_BLUE}"
echo "üî• Makandal - L'Assistant Rebelle des Tests E2E"
echo "\"Celui qui brise les cha√Ænes de la cr√©ation manuelle\""
echo "=================================================="
echo -e "${COLOR_NC}"

# V√©rification de l'environnement
echo -e "${COLOR_YELLOW}üîç V√©rification de l'environnement rebelle...${COLOR_NC}"

# Node.js avec validation de version
if ! command -v node &> /dev/null; then
    echo -e "${COLOR_RED}‚ùå Node.js n'est pas install√©${COLOR_NC}"
    echo "üì• Installez Node.js ‚â•16.0.0 depuis https://nodejs.org/"
    exit 1
fi

NODE_VERSION=$(node --version | cut -d 'v' -f 2)
MAJOR_VERSION=$(echo $NODE_VERSION | cut -d '.' -f 1)

if [ "$MAJOR_VERSION" -lt 16 ]; then
    echo -e "${COLOR_RED}‚ùå Node.js $NODE_VERSION trop ancien${COLOR_NC}"
    echo "üì• Makandal exige Node.js ‚â•16.0.0 pour sa r√©volution !"
    exit 1
fi

echo -e "${COLOR_GREEN}‚úÖ Node.js ${NODE_VERSION} - Pr√™t pour la r√©volution !${COLOR_NC}"
log_verbose "Version Node.js valid√©e: $NODE_VERSION"

# npm
if ! command -v npm &> /dev/null; then
    echo -e "${COLOR_RED}‚ùå npm n'est pas install√©${COLOR_NC}"
    exit 1
fi

NPM_VERSION=$(npm --version)
echo -e "${COLOR_GREEN}‚úÖ npm ${NPM_VERSION}${COLOR_NC}"

# V√©rification Git standalone
echo -e "${COLOR_YELLOW}üìù V√©rification du territoire Git...${COLOR_NC}"

if [ -d ".git" ]; then
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")
    echo -e "${COLOR_GREEN}‚úÖ Repository Git Makandal (branche: ${CURRENT_BRANCH})${COLOR_NC}"
    log_verbose "Projet Git standalone d√©tect√©"
    
    # Sugg√®re un git pull si on est sur main/master
    if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "master" ]]; then
        if ! git diff --quiet HEAD @{upstream} 2>/dev/null; then
            echo -e "${COLOR_YELLOW}üí° Suggestion: git pull pour les derni√®res armes r√©volutionnaires${COLOR_NC}"
        fi
    fi
else
    echo -e "${COLOR_YELLOW}‚ÑπÔ∏è  Pas de Git (installation locale)${COLOR_NC}"
fi

# Installation des d√©pendances
echo -e "${COLOR_YELLOW}üì¶ Armement de l'arsenal Makandal...${COLOR_NC}"

if [ ! -d "node_modules" ] || [ "$FORCE_INSTALL" = true ]; then
    log_verbose "Installation des d√©pendances npm..."
    if [ "$VERBOSE" = true ]; then
        npm install
    else
        npm install --silent
    fi
    echo -e "${COLOR_GREEN}‚úÖ Arsenal Makandal arm√© et pr√™t !${COLOR_NC}"
else
    echo -e "${COLOR_GREEN}‚úÖ Arsenal d√©j√† en place${COLOR_NC}"
fi

# Validation adaptative de la structure
echo -e "${COLOR_YELLOW}üèóÔ∏è Inspection du camp de base...${COLOR_NC}"

CRITICAL_FILES=(
    "package.json:Configuration du projet"
    "README.md:Documentation principale"
    "tools/:Outils de conversion"
    "ai-discovery-prompts/:Intelligence artificielle"
)

for item in "${CRITICAL_FILES[@]}"; do
    file=$(echo $item | cut -d ':' -f 1)
    desc=$(echo $item | cut -d ':' -f 2)
    
    if [ -e "$file" ]; then
        echo -e "${COLOR_GREEN}‚úÖ $file ($desc)${COLOR_NC}"
        log_verbose "Valid√©: $file"
    else
        echo -e "${COLOR_YELLOW}‚ö†Ô∏è  $file manquant ($desc)${COLOR_NC}"
    fi
done

# Validation du code
echo -e "${COLOR_YELLOW}üîß Test des armes r√©volutionnaires...${COLOR_NC}"

# Utilise npm validate si disponible
if [ -f "package.json" ] && npm run validate > /dev/null 2>&1; then
    echo -e "${COLOR_GREEN}‚úÖ Code valid√© par les standards rebelles${COLOR_NC}"
    log_verbose "Validation npm r√©ussie"
else
    # Fallback : validation manuelle
    log_verbose "Fallback: validation manuelle des fichiers critiques"
    
    if [ -f "tools/chrome-to-cucumber-converter.js" ]; then
        if node -c "tools/chrome-to-cucumber-converter.js" 2>/dev/null; then
            echo -e "${COLOR_GREEN}‚úÖ Convertisseur Makandal op√©rationnel${COLOR_NC}"
        else
            echo -e "${COLOR_RED}‚ùå Erreur dans le convertisseur principal${COLOR_NC}"
            exit 1
        fi
    fi
fi

# Configuration des permissions
echo -e "${COLOR_YELLOW}üîê Attribution des pouvoirs r√©volutionnaires...${COLOR_NC}"

find scripts/ -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
chmod +x install.sh 2>/dev/null || true

echo -e "${COLOR_GREEN}‚úÖ Pouvoirs accord√©s √† l'assistant rebelle${COLOR_NC}"

# Test de l'agent Makandal
if [ "$SKIP_TESTS" = false ]; then
    echo -e "${COLOR_YELLOW}üß™ Test de l'agent rebelle...${COLOR_NC}"
    
    if npm test > /dev/null 2>&1; then
        echo -e "${COLOR_GREEN}‚úÖ Makandal op√©rationnel et pr√™t au combat !${COLOR_NC}"
        
        # Nettoyage automatique des fichiers de test
        find examples/ -name "*_elements.json5" -delete 2>/dev/null || true
        find examples/ -name "*_urls.json5" -delete 2>/dev/null || true
        find examples/ -name "*.feature" ! -name "example-chrome-recording.json" -delete 2>/dev/null || true
        log_verbose "Nettoyage des fichiers de test termin√©"
        
    else
        echo -e "${COLOR_RED}‚ùå L'agent rebelle rencontre des difficult√©s${COLOR_NC}"
        echo "üîç Ex√©cutez 'npm test' pour diagnostiquer les probl√®mes"
        exit 1
    fi
else
    echo -e "${COLOR_YELLOW}‚è≠Ô∏è  Tests ignor√©s (option --skip-tests)${COLOR_NC}"
fi

# Validation de l'IA
if [ -d "ai-discovery-prompts" ]; then
    echo -e "${COLOR_YELLOW}ü§ñ V√©rification de l'intelligence rebelle...${COLOR_NC}"
    
    AI_FILES=(
        "ai-discovery-prompts/AI-AGENT-CONFIG.json5"
        "ai-discovery-prompts/01-discover-definitions.md"
        "ai-discovery-prompts/02-intelligent-merge.md"
    )
    
    AI_COUNT=0
    for ai_file in "${AI_FILES[@]}"; do
        if [ -f "$ai_file" ]; then
            ((AI_COUNT++))
        fi
    done
    
    if [ "$AI_COUNT" -gt 0 ]; then
        echo -e "${COLOR_GREEN}‚úÖ Intelligence artificielle rebelle ($AI_COUNT prompts)${COLOR_NC}"
        log_verbose "Prompts IA d√©tect√©s: $AI_COUNT"
    else
        echo -e "${COLOR_YELLOW}‚ö†Ô∏è  Prompts IA manquants${COLOR_NC}"
    fi
fi

echo -e "${COLOR_GREEN}"
echo "üéâ Makandal est arm√© et pr√™t √† r√©volutionner vos tests !"
echo "=================================================="
echo -e "${COLOR_NC}"

echo -e "${COLOR_BLUE}‚öîÔ∏è  Commandes de guerre disponibles :${COLOR_NC}"
echo "‚Ä¢ npm test                     - Test complet de l'agent"
echo "‚Ä¢ npm run convert <file.json>  - Conversion Chrome ‚Üí Cucumber"
echo "‚Ä¢ npm run workflow <file.json> - Workflow complet avec IA"
echo "‚Ä¢ npm run validate             - V√©rification des armes"

echo ""
echo -e "${COLOR_BLUE}üìö Arsenal de connaissances :${COLOR_NC}"
echo "‚Ä¢ README.md                    - Manifeste r√©volutionnaire" 
echo "‚Ä¢ docs/                        - Guides tactiques d√©taill√©s"
echo "‚Ä¢ ai-discovery-prompts/        - Intelligence artificielle rebelle"
echo "‚Ä¢ examples/                    - Exemples de batailles gagn√©es"

echo ""
echo -e "${COLOR_BLUE}üéØ Workflow de lib√©ration :${COLOR_NC}"
echo "1. üé• Enregistrez dans Chrome DevTools Recorder"
echo "2. üì• Exportez en JSON"
echo "3. üî• Lancez: npm run workflow votre-enregistrement.json"
echo "4. ‚ú® R√©cup√©rez vos tests lib√©r√©s et optimis√©s !"

echo ""
if [ "$VERBOSE" = true ]; then
    echo -e "${COLOR_PURPLE}üîç Mode verbeux activ√© - Tous les d√©tails affich√©s${COLOR_NC}"
fi

echo -e "${COLOR_GREEN}üî• Que la r√©volution des tests E2E commence ! üî•${COLOR_NC}"
echo -e "${COLOR_BLUE}\"Fran√ßois Makandal guide notre intelligence artificielle\" ‚öîÔ∏è${COLOR_NC}"

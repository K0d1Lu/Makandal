/**
 * üî• Makandal Chrome Recorder - Template Intelligent
 * ü§ñ Template de base pour hydratation par IA
 * 
 * Variables √† remplacer par l'IA selon le projet :
 * {{PROJECT_NAME}} - Nom du projet (ex: "Wedia Portal", "React App")
 * {{PROJECT_DESCRIPTION}} - Description courte du projet
 * {{SELECTOR_PRIORITIES}} - Array des s√©lecteurs prioritaires  
 * {{DYNAMIC_VALUE_PATTERNS}} - Patterns des valeurs dynamiques √† √©viter
 * {{DYNAMIC_CLASS_PATTERNS}} - Patterns des classes dynamiques √† √©viter
 * {{SPECIFIC_LOGIC}} - Logique sp√©cifique au projet
 * {{MESSAGES}} - Messages console personnalis√©s
 * {{TEST_ELEMENTS}} - √âl√©ments typiques pour la fonction test()
 * {{GENERATION_DATE}} - Date de g√©n√©ration
 * {{PROJECT_SPECIFIC_FUNCTIONS}} - Fonctions sp√©cialis√©es au projet
 */
(function() {
  'use strict';
  
  console.log('üî• Chargement Makandal - {{PROJECT_NAME}}...');

  // üéØ Configuration sp√©cialis√©e {{PROJECT_NAME}}
  const PROJECT_CONFIG = {
    name: '{{PROJECT_NAME}} - G√©n√©r√© par IA le {{GENERATION_DATE}}',
    description: '{{PROJECT_DESCRIPTION}}',
    
    // Priorit√© des s√©lecteurs pour {{PROJECT_NAME}}
    selectorPriorities: {{SELECTOR_PRIORITIES}},
    
    // Patterns de valeurs dynamiques √† √©viter (sp√©cifiques {{PROJECT_NAME}})
    dynamicValuePatterns: {{DYNAMIC_VALUE_PATTERNS}},
    
    // Classes CSS dynamiques √† √©viter ({{PROJECT_NAME}})
    dynamicClassPatterns: {{DYNAMIC_CLASS_PATTERNS}},
    
    // Pr√©f√©rences sp√©ciales {{PROJECT_NAME}}
    preferences: {
      allowTextSelectors: true,
      maxTextLength: 30,
      ignoreHiddenElements: true,
      preferDataAttributes: true,
      projectSpecific: {
        // Variables sp√©cifiques remplac√©es par IA
        {{SPECIFIC_PREFERENCES}}
      }
    }
  };

  // üß† Compilation des patterns pour performance
  let compiledValuePatterns = [];
  let compiledClassPatterns = [];
  
  function compilePatterns() {
    // Compilation des regex depuis la configuration
    compiledValuePatterns = PROJECT_CONFIG.dynamicValuePatterns.map(p => 
      new RegExp(p.pattern, p.flags || '')
    );
    
    compiledClassPatterns = PROJECT_CONFIG.dynamicClassPatterns.map(p => 
      new RegExp(p.pattern, p.flags || '')
    );
    
    console.log('‚úÖ Patterns {{PROJECT_NAME}} compil√©s:', {
      valeurs: compiledValuePatterns.length,
      classes: compiledClassPatterns.length
    });
  }

  // üéØ Fonction principale - G√©n√©ration s√©lecteur stable
  function generateStableSelector(element) {
    if (!element || !element.nodeType) {
      console.warn('‚ö†Ô∏è √âl√©ment invalide fourni √† generateStableSelector');
      return null;
    }

    // Ignorer √©l√©ments cach√©s si configur√©
    if (PROJECT_CONFIG.preferences.ignoreHiddenElements) {
      if (element.offsetParent === null || 
          window.getComputedStyle(element).display === 'none') {
        return null;
      }
    }

    // 1Ô∏è‚É£ Priorit√© aux attributs m√©tier {{PROJECT_NAME}}
    for (const attr of PROJECT_CONFIG.selectorPriorities) {
      const value = element.getAttribute(attr);
      if (value && !isDynamicValue(value)) {
        // Logique sp√©cifique {{PROJECT_NAME}} g√©n√©r√©e par IA
        {{SPECIFIC_SELECTOR_LOGIC}}
        return `[${attr}="${value}"]`;
      }
    }

    // 2Ô∏è‚É£ Classes CSS stables (filtrage {{PROJECT_NAME}})
    const classList = Array.from(element.classList)
      .filter(cls => !isDynamicClass(cls))
      .filter(cls => isProjectStableClass(cls));
    
    if (classList.length > 0) {
      const classSelector = `.${classList.join('.')}`;
      console.log('üé® S√©lecteur classes stables {{PROJECT_NAME}}:', classSelector);
      return classSelector;
    }

    // 3Ô∏è‚É£ S√©lecteur par texte (optimis√© {{PROJECT_NAME}})
    if (PROJECT_CONFIG.preferences.allowTextSelectors) {
      const textContent = element.textContent?.trim();
      const maxLength = PROJECT_CONFIG.preferences.maxTextLength;
      
      if (textContent && 
          textContent.length <= maxLength && 
          isUniqueText(textContent) &&
          isProjectRelevantText(textContent)) {
        console.log('üìù S√©lecteur texte {{PROJECT_NAME}}:', textContent);
        return `text/${textContent}`;
      }
    }

    // 4Ô∏è‚É£ Fallback intelligent {{PROJECT_NAME}}
    return generateProjectFallback(element);
  }

  // üö´ D√©tection valeurs dynamiques  
  function isDynamicValue(value) {
    return compiledValuePatterns.some(pattern => pattern.test(value));
  }

  // üö´ D√©tection classes dynamiques
  function isDynamicClass(className) {
    return compiledClassPatterns.some(pattern => pattern.test(className));
  }

  // ‚úÖ Classes stables sp√©cifiques {{PROJECT_NAME}} (remplac√©es par IA)
  function isProjectStableClass(className) {
    {{PROJECT_STABLE_CLASS_LOGIC}}
  }

  // üìù Validation texte pertinent {{PROJECT_NAME}} (remplac√© par IA)
  function isProjectRelevantText(text) {
    {{PROJECT_TEXT_VALIDATION_LOGIC}}
  }

  // üîç V√©rification unicit√© texte
  function isUniqueText(text) {
    try {
      const elements = document.querySelectorAll('*');
      let count = 0;
      
      for (const el of elements) {
        if (el.textContent?.trim() === text) {
          count++;
          if (count > 1) return false;
        }
      }
      
      return count === 1;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur v√©rification unicit√© texte:', error);
      return false;
    }
  }

  // üÜò Fallback intelligent {{PROJECT_NAME}} (remplac√© par IA)
  function generateProjectFallback(element) {
    {{PROJECT_FALLBACK_LOGIC}}
  }

  // Fonctions sp√©cialis√©es {{PROJECT_NAME}} g√©n√©r√©es par IA
  {{PROJECT_SPECIFIC_FUNCTIONS}}

  // üß™ Fonction de test pour validation
  function test() {
    console.log('üß™ Test Makandal pour {{PROJECT_NAME}}...');
    
    // Test sur √©l√©ments typiques {{PROJECT_NAME}} (remplac√© par IA)
    const testSelectors = {{TEST_ELEMENTS}};
    
    let found = 0;
    testSelectors.forEach(selector => {
      try {
        const element = document.querySelector(`[${selector}], ${selector}`);
        if (element) {
          const result = generateStableSelector(element);
          console.log(`‚úÖ ${selector} ‚Üí ${result}`);
          found++;
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è ${selector} ‚Üí non trouv√©`);
      }
    });
    
    console.log(`üéØ Test termin√©: ${found}/${testSelectors.length} s√©lecteurs trouv√©s`);
    return found;
  }

  // üöÄ Initialisation automatique
  function init() {
    compilePatterns();
    
    // Messages personnalis√©s {{PROJECT_NAME}} (remplac√©s par IA)
    {{MESSAGES}}
    
    // Export global pour utilisation
    window.MakandalRecorder = {
      generateStableSelector,
      isDynamicValue,
      isDynamicClass,
      isProjectStableClass,
      CONFIG: PROJECT_CONFIG,
      test,
      version: '2.0.0-template-{{GENERATION_DATE}}',
      project: '{{PROJECT_NAME}}'
    };
    
    console.log('üî• window.MakandalRecorder disponible pour {{PROJECT_NAME}} !');
    console.log('üí° Tapez MakandalRecorder.test() pour valider');
  }

  // üé¨ Auto-initialisation
  init();

})();

// üéâ Script Makandal pour {{PROJECT_NAME}} - Template hydrat√© par IA - {{GENERATION_DATE}}
console.log('‚öîÔ∏è "Fran√ßois Makandal guide l\'optimisation de {{PROJECT_NAME}} !" ‚öîÔ∏è');
